services:
  product-service:
    build:
      context: .
      dockerfile: src/Services/ProductService/ProductService.Api/Dockerfile
    ports:
      - "5001:8080" # Host:Container. 8080 is the default HTTP port for .NET 8+ aspnet images
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_HTTP_PORTS=8080 # Explicitly set container HTTP port

  inventory-service:
    build:
      context: .
      dockerfile: src/Services/InventoryService/InventoryService.Api/Dockerfile
    ports:
      - "5002:8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_HTTP_PORTS=8080

  order-service:
    build:
      context: .
      dockerfile: src/Services/OrderService/OrderService.Api/Dockerfile
    ports:
      - "5003:8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_HTTP_PORTS=8080
    
  postgres-db:
    image: postgres:15-alpine # Using PostgreSQL version 15 on Alpine Linux for a smaller image
    container_name: yarp_postgres_db # Optional: give the container a specific name
    environment:
      POSTGRES_USER: yarpuser        # Define the default superuser for the database
      POSTGRES_PASSWORD: yarpPassword  # Define the password for the superuser
      POSTGRES_DB: yarp_routing_db   # Optional: Creates this database automatically on first run
    ports:
      - "5432:5432" # Map host port 5432 to container port 5432 (default PostgreSQL port)
    volumes:
      - postgres_data:/var/lib/postgresql/data # Persist database data
    restart: unless-stopped # Optional: restarts the DB container if it stops, unless manually stopped

  gateway-api: 
    build:
      context: .
      dockerfile: src/Gateway/Gateway.Api/Dockerfile
    ports:
      - "5500:8080" # YARP gateway will be accessible on host port 5000
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_HTTP_PORTS=8080 # Gateway container listens on 8080
    depends_on: # Good practice: ensure backend services start first
      - product-service
      - inventory-service
      - order-service
      - postgres-db
      
volumes:
  postgres_data: # This named volume will store the PostgreSQL data

