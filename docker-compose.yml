services:
  product-service-a:
    build:
      context: .
      dockerfile: src/Services/ProductService/ProductService.Api/Dockerfile
    ports:
      - "5001:8080" # Host:Container. 8080 is the default HTTP port for .NET 8+ aspnet images
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_HTTP_PORTS=8080 # Explicitly set container HTTP port
      
  product-service-b:
    build:
      context: .
      dockerfile: src/Services/ProductService/ProductService.Api/Dockerfile
    ports:
      - "5011:8080" # Host:Container. 8080 is the default HTTP port for .NET 8+ aspnet images
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_HTTP_PORTS=8080 # Explicitly set container HTTP port

  postgres-db:
    image: postgres:15-alpine # Using PostgreSQL version 15 on Alpine Linux for a smaller image
    container_name: yarp_postgres_db # Optional: give the container a specific name
    environment:
      POSTGRES_USER: yarpuser        # Define the default superuser for the database
      POSTGRES_PASSWORD: yarpPassword  # Define the password for the superuser
      POSTGRES_DB: yarp_routing_db   # Optional: Creates this database automatically on first run
    ports:
      - "5432:5432" # Map host port 5432 to container port 5432 (default PostgreSQL port)
    volumes:
      - postgres_data:/var/lib/postgresql/data # Persist database data
    restart: unless-stopped # Optional: restarts the DB container if it stops, unless manually stopped

  gateway-api: 
    build:
      context: .
      dockerfile: src/ManualGateway/ManualGateway.Api/Dockerfile
    ports:
      - "5012:8080" # YARP gateway will be accessible on host port 5012
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_HTTP_PORTS=8080 # Gateway container listens on 8080
    depends_on: # Good practice: ensure backend services start first
      - product-service-a
      - product-service-b
      - postgres-db
    
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml # Bind mounts the config file into the container
      - prometheus_data:/prometheus # Named volume to persist metrics data
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    restart: unless-stopped
  
  grafana:
    image: grafana/grafana-enterprise
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    restart: unless-stopped
    depends_on:
      - prometheus
      
volumes:
  postgres_data: # This named volume will store the PostgreSQL data
  prometheus_data: # This named volume will store the Prometheus metrics data
  grafana_data: # This names volume will store the Grafana data

